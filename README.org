* Fast and optimal change-point algorithms

- Semi-plenary talk for JDS Marseille, June 2025.
- [[https://raw.githubusercontent.com/tdhock/functional-pruning-theory/refs/heads/master/HOCKING-slides-marseille.pdf][Slides PDF]]

Abstract:
In this talk I present an overview of algorithmic advances in optimal change-point detection (2005-2025).
Detecting abrupt changes is an important problem in N data gathered over time or space.
In this setting, maximum likelihood inference amounts to minimizing a loss function (which encourages data fitting) plus a penalty on the number of changes in the model parameters (which discourages overfitting).
Computing the optimal solution to this non-convex problem is possible using dynamic programming algorithms such as OP, PELT, FPOP, and DUST.
We will discuss how recent algorithms have resulted in speed improvements of 1000x or more, while maintaining optimality of the detected change-points.

** Principal result figures

Source code: 
[[file:figure-dust-fpop-pelt.R]]

*** Number of candidates

[[file:figure-dust-fpop-pelt-candidates.png]]

[[file:figure-pred-candidates-O.png]]

*** Computation time

[[file:figure-dust-fpop-pelt-seconds.png]]

[[file:figure-pred-seconds-O.png]]

* Why does functional pruning yield such fast algorithms for optimal changepoint detection?

- [[file:HOCKING-slides.pdf][Slides PDF]]

Abstract: In this talk I will present a review of recently proposed
algorithms for optimal changepoint detection, which are empirically
very fast, but we don't have any good theoretical justification as to
why this is the case in realistic data settings. 
Detecting abrupt changes is an important problem in N data
gathered over time or space. In this setting, maximum likelihood
inference amounts to minimizing a loss function (which encourages data
fitting) plus a penalty on the number of changes in the model
parameters (which discourages overfitting). Computing the optimal
solution to this non-convex problem is possible using classical
dynamic programming algorithms, but their O(N^2) complexity is too
slow for large data sequences. The functional pruning technique of
Rigaill involves storing the optimal cost using functions rather than
scalar values. Empirical results from several recent papers show that
the functional pruning technique consistently yields optimal
algorithms of O(N log N) complexity, which is computationally
tractable for very large N. The theoretical results of Rigaill prove
that functional pruning is O(N^2) in the worst case and O(N log N) on
average (for a special loss function). For future work it would be
interesting to further study the average complexity of these
algorithms, in order to provide more theoretical justification for
these very fast empirical results.

TODO: update slides with links to more recent papers that have theoretical analysis of time complexity.

** 2 May 2025

- https://github.com/aLiehrmann/MsFPOP
- GeomFPOP https://computo.sfds.asso.fr/published-202406-pishchagina-change-point/
- DuST https://onlinelibrary.wiley.com/doi/full/10.1002/sta4.70012
- robseg https://www.tandfonline.com/doi/full/10.1080/01621459.2017.1385466
- CV https://arxiv.org/pdf/2112.03220
- HOP https://proceedings.mlr.press/v258/kostic25a.html
- AR1 exact algo https://www.tandfonline.com/doi/full/10.1080/01621459.2021.1909598
- FOCUS online https://www.jmlr.org/papers/v24/21-1230.html
- online multivariate complexity proof https://arxiv.org/abs/2311.01174

** 1 July 2021

[[file:HOCKING-recent-advances.pdf][Recent advances in supervised optimal changepoint detection slides PDF]].

** 26 Feb 2020

[[file:figure-worst-case.R]] makes [[file:figure-worst-case.pdf]] showing
synthetic increasing data achieves worst case quadratic complexity.

** 26 Sept 2018

Prepared [[file:HOCKING-slides.tex]] for math colloquium.

** 4 May 2016

- [[https://github.com/tdhock/PeakSegFPOP-paper/blob/master/figure-unconstrained-PDPA-normal.R]] 
  implements the unconstrained
  PDPA and creates interactive data viz of the functional cost model and pruning
  [[http://cbio.ensmp.fr/~thocking/figure-unconstrained-PDPA-normal-big/]]
